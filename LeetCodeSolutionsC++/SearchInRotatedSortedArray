//Run time: O(log(N))
//Space : O(1)
class Solution {
public:
    int search(vector<int>& nums, int target) {
        
        int left = 0;
        int right = nums.size()-1;
        int index = -1;
        
        if(nums.size() ==1 && target == nums[0])
            return 0;
        else if(nums.size() ==1 && target != nums[0])
            return -1;
             
        while(left < right){  //First Binary search to find the inflection pt
            int mid = left + (right - left) /2;
            if(nums[mid] > nums[right])
                left = mid + 1;
            else
                right = mid;
        }
        int start = left;
        right = nums.size()-1;
        
        if( target >= nums[left] && target <= nums[right])
            left = start;
        else {
            left = 0;
            right = start;
        }
            
        while(left <= right){
            int mid = left + (right - left) /2;
            if(nums[mid] == target)
                return mid;
            else if(nums[mid] < target)
                left = mid + 1;
            else
                right = mid -1 ;
        }
        return -1;
    }
};