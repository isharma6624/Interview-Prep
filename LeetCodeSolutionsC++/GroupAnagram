//run time: O()
//space: 
//create map with key as sorted word and value as vector of words. then push all values of map into ans 
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>> ans;
        map<string,vector<string>> bucket; //map
        
         for(int i= 0; i < strs.size(); i++){ //every word in array add to map
            string temp;
            temp = strs[i]; //word
            sort(temp.begin(),temp.end()); //sort word
            if(bucket.count(temp) > 0 ){ //if sorted word exists then add the orig word to value of that sorted key word
                bucket[temp].push_back(strs[i]); //if the sorted word is in map add this new word 
            }
            else{  //create a new key and value as vector of strings, insert in the orig word.
                vector<string> tmp;
                bucket[temp] = tmp;
                bucket[temp].push_back(strs[i]);
            }
        }
        
        for(auto i : bucket){
            ans.push_back(i.second); //push all map values into ans
        }
        
        return ans;
    }
};